name: CI

on:
  schedule:
    - cron: '0 0 * * 0'
  push:
    branches:
      - master
    tags:
      - 'v[0-9]+.[0-9]+.[0-9]+*'
  pull_request:

jobs:
  rustfmt:
    name: Rustfmt
    runs-on: ubuntu-18.04

    steps:
      - name: Checkout
        uses: actions/checkout@v1

      - name: Install toolchain and target
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable-x86_64-unknown-linux-gnu
          default: true

      - name: Display component versions
        run: |
          rustup show
          echo -e '\n'
          rustc -Vv
          echo -e '\n'
          cargo -Vv
          echo -e '\n'
          rustfmt -V

      - name: cargo fmt -- --check
        uses: actions-rs/cargo@v1
        with:
          command: fmt
          args: --all -- --check

  build:
    strategy:
      fail-fast: false
      matrix:
        channel:
          - stable
        target_triple:
          - x86_64-pc-windows-msvc
          - x86_64-pc-windows-gnu
          - x86_64-apple-darwin
          - x86_64-unknown-linux-gnu
          - x86_64-unknown-linux-musl
        include:
          - channel: stable
            target_triple: x86_64-pc-windows-msvc
            host_triple: x86_64-pc-windows-msvc
            os: windows-2019
          - channel: stable
            target_triple: x86_64-pc-windows-gnu
            host_triple: x86_64-pc-windows-gnu
            os: windows-2019
          - channel: stable
            target_triple: x86_64-apple-darwin
            host_triple: x86_64-apple-darwin
            os: macOS-10.14
          - channel: stable
            target_triple: x86_64-unknown-linux-gnu
            host_triple: x86_64-unknown-linux-gnu
            os: ubuntu-18.04
          - channel: stable
            target_triple: x86_64-unknown-linux-musl
            host_triple: x86_64-unknown-linux-gnu
            os: ubuntu-18.04

    name: ${{ matrix.channel }}-${{ matrix.target_triple }}
    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout
        uses: actions/checkout@v1

      - name: apt-get install
        run: sudo apt-get install musl-tools
        if: matrix.target_triple == 'x86_64-unknown-linux-musl'

      - name: Build OpenSSL
        run: . ./ci/openssl.bash
        if: matrix.target_triple == 'x86_64-unknown-linux-musl'

      - name: Install toolchain and target
        uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ matrix.channel }}-${{ matrix.host_triple }}
          target: ${{ matrix.target_triple }}
          default: true

      - name: rustup component add clippy
        run: rustup component add clippy

      - name: Display component versions
        run: |
          rustup show
          echo -e '\n'
          rustc -Vv
          echo -e '\n'
          cargo -Vv
          echo -e '\n'
          cargo clippy -V
        shell: bash

      # - name: cargo clippy
      #   run: |
      #     # Avoid IRC
      #     cargo check --all --all-targets --all-features --target ${{ matrix.target_triple }}
      #     if ${{ matrix.os == 'windows-2019' }}; then
      #       TO_UNIX_PATHS='xargs cygpath -u'
      #     else
      #       TO_UNIX_PATHS=cat
      #     fi
      #     cargo metadata --format-version 1 |
      #       jq -r '.workspace_members[] as $members | .packages[] | select(.id == $members) | .targets[].src_path' |
      #       $TO_UNIX_PATHS |
      #       xargs touch
      #     cargo clippy --all --all-targets --all-features --target ${{ matrix.target_triple }} -- -D warnings
      #   shell: bash

      - name: cargo clippy
        uses: actions-rs/cargo@v1
        with:
          command: clippy
          args: --all --all-targets --all-features --target ${{ matrix.target_triple }} -- -D warnings

      - name: cargo test
        uses: actions-rs/cargo@v1
        with:
          command: test
          args: --all --all-targets --all-features --no-fail-fast --target ${{ matrix.target_triple }}

  release:
    strategy:
      fail-fast: true
      matrix:
        target_triple:
          - x86_64-pc-windows-msvc
          - x86_64-pc-windows-gnu
          - x86_64-apple-darwin
          - x86_64-unknown-linux-gnu
          - x86_64-unknown-linux-musl
        include:
          - target_triple: x86_64-pc-windows-msvc
            host_triple: x86_64-pc-windows-msvc
            os: windows-2019
          - target_triple: x86_64-pc-windows-gnu
            host_triple: x86_64-pc-windows-gnu
            os: windows-2019
          - target_triple: x86_64-apple-darwin
            host_triple: x86_64-apple-darwin
            os: macOS-10.14
          - target_triple: x86_64-unknown-linux-gnu
            host_triple: x86_64-unknown-linux-gnu
            os: ubuntu-18.04
          - target_triple: x86_64-unknown-linux-musl
            host_triple: x86_64-unknown-linux-gnu
            os: ubuntu-18.04

    name: GitHub Release (${{ matrix.target_triple }})
    runs-on: ${{ matrix.os }}
    needs: [rustfmt, build]
    if: startsWith(github.ref, 'refs/tags/')

    steps:
      - name: Checkout
        uses: actions/checkout@v1

      - name: apt-get install
        run: sudo apt-get install musl-tools
        if: matrix.target_triple == 'x86_64-unknown-linux-musl'

      - name: Build OpenSSL
        run: . ./ci/openssl.bash
        if: matrix.target_triple == 'x86_64-unknown-linux-musl'

      - name: Install toolchain and target
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable-${{ matrix.host_triple }}
          target: ${{ matrix.target_triple }}
          default: true

      - name: cargo build --release
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: --release --all-features --target ${{ matrix.target_triple }}

      - name: Create an asset
        id: asset
        run: |
          if ${{ contains(matrix.target_triple, 'pc-windows') }}; then
            EXE=.exe
          fi
          EXECUTABLE="./target/${{ matrix.target_triple }}/release/${GITHUB_REPOSITORY#*/}$EXE"
          ASSET_STEM="${GITHUB_REPOSITORY#*/}-${GITHUB_REF#refs/tags/}-${{ matrix.target_triple }}"
          git archive -o "./$ASSET_STEM.tar" --prefix "$ASSET_STEM/" HEAD
          tar -xf "./$ASSET_STEM.tar"
          mv "$EXECUTABLE" "./$ASSET_STEM/"
          if ${{ contains(matrix.target_triple, 'pc-windows') }}; then
            ASSET="./$ASSET_STEM.zip"
            7z a "$ASSET" "./$ASSET_STEM"
            zipinfo "$ASSET"
          else
            ASSET="./$ASSET_STEM.tar.gz"
            tar -czvf "$ASSET" "./$ASSET_STEM"
          fi
          echo "::set-output name=asset::$ASSET"
        shell: bash

      - name: Upload
        uses: softprops/action-gh-release@v1
        with:
          files: ${{ steps.asset.outputs.asset }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  publish:
    name: cargo pubish
    runs-on: ubuntu-18.04
    needs: [rustfmt, build, release]
    if: startsWith(github.ref, 'refs/tags/')

    steps:
      - uses: actions/checkout@v1

      - name: Install toolchain and target
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable-x86_64-unknown-linux-gnu
          default: true

      - name: cargo publish
        uses: actions-rs/cargo@v1
        with:
          command: publish
          args: --all-features --verbose --token ${{ secrets.CRATES_IO_TOKEN }}
